// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "shopping_list.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CreateShoppingListRequest
 */
export interface CreateShoppingListRequest {
    /**
     * @generated from protobuf field: repeated string items = 1;
     */
    items: string[];
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message CreateShoppingListResponse
 */
export interface CreateShoppingListResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message updateShoppingListRequest
 */
export interface updateShoppingListRequest {
    /**
     * @generated from protobuf field: repeated string items_to_remove = 1;
     */
    itemsToRemove: string[];
    /**
     * @generated from protobuf field: repeated string items_to_add = 2;
     */
    itemsToAdd: string[];
}
/**
 * @generated from protobuf message updateShoppingListResponse
 */
export interface updateShoppingListResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: repeated string current_items = 2;
     */
    currentItems: string[];
}
/**
 * @generated from protobuf message deleteShoppingListRequest
 */
export interface deleteShoppingListRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message deleteShoppingListResponse
 */
export interface deleteShoppingListResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message getShoppingListRequest
 */
export interface getShoppingListRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message getShoppingListResponse
 */
export interface getShoppingListResponse {
    /**
     * @generated from protobuf field: repeated string current_items = 1;
     */
    currentItems: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateShoppingListRequest$Type extends MessageType<CreateShoppingListRequest> {
    constructor() {
        super("CreateShoppingListRequest", [
            { no: 1, name: "items", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateShoppingListRequest>): CreateShoppingListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CreateShoppingListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateShoppingListRequest): CreateShoppingListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string items */ 1:
                    message.items.push(reader.string());
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateShoppingListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string items = 1; */
        for (let i = 0; i < message.items.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.items[i]);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateShoppingListRequest
 */
export const CreateShoppingListRequest = new CreateShoppingListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateShoppingListResponse$Type extends MessageType<CreateShoppingListResponse> {
    constructor() {
        super("CreateShoppingListResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateShoppingListResponse>): CreateShoppingListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CreateShoppingListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateShoppingListResponse): CreateShoppingListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateShoppingListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateShoppingListResponse
 */
export const CreateShoppingListResponse = new CreateShoppingListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class updateShoppingListRequest$Type extends MessageType<updateShoppingListRequest> {
    constructor() {
        super("updateShoppingListRequest", [
            { no: 1, name: "items_to_remove", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "items_to_add", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<updateShoppingListRequest>): updateShoppingListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemsToRemove = [];
        message.itemsToAdd = [];
        if (value !== undefined)
            reflectionMergePartial<updateShoppingListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: updateShoppingListRequest): updateShoppingListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string items_to_remove */ 1:
                    message.itemsToRemove.push(reader.string());
                    break;
                case /* repeated string items_to_add */ 2:
                    message.itemsToAdd.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: updateShoppingListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string items_to_remove = 1; */
        for (let i = 0; i < message.itemsToRemove.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.itemsToRemove[i]);
        /* repeated string items_to_add = 2; */
        for (let i = 0; i < message.itemsToAdd.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.itemsToAdd[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message updateShoppingListRequest
 */
export const updateShoppingListRequest = new updateShoppingListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class updateShoppingListResponse$Type extends MessageType<updateShoppingListResponse> {
    constructor() {
        super("updateShoppingListResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "current_items", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<updateShoppingListResponse>): updateShoppingListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.currentItems = [];
        if (value !== undefined)
            reflectionMergePartial<updateShoppingListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: updateShoppingListResponse): updateShoppingListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* repeated string current_items */ 2:
                    message.currentItems.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: updateShoppingListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* repeated string current_items = 2; */
        for (let i = 0; i < message.currentItems.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.currentItems[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message updateShoppingListResponse
 */
export const updateShoppingListResponse = new updateShoppingListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class deleteShoppingListRequest$Type extends MessageType<deleteShoppingListRequest> {
    constructor() {
        super("deleteShoppingListRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<deleteShoppingListRequest>): deleteShoppingListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<deleteShoppingListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: deleteShoppingListRequest): deleteShoppingListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: deleteShoppingListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message deleteShoppingListRequest
 */
export const deleteShoppingListRequest = new deleteShoppingListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class deleteShoppingListResponse$Type extends MessageType<deleteShoppingListResponse> {
    constructor() {
        super("deleteShoppingListResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<deleteShoppingListResponse>): deleteShoppingListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<deleteShoppingListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: deleteShoppingListResponse): deleteShoppingListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: deleteShoppingListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message deleteShoppingListResponse
 */
export const deleteShoppingListResponse = new deleteShoppingListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class getShoppingListRequest$Type extends MessageType<getShoppingListRequest> {
    constructor() {
        super("getShoppingListRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<getShoppingListRequest>): getShoppingListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<getShoppingListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: getShoppingListRequest): getShoppingListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: getShoppingListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message getShoppingListRequest
 */
export const getShoppingListRequest = new getShoppingListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class getShoppingListResponse$Type extends MessageType<getShoppingListResponse> {
    constructor() {
        super("getShoppingListResponse", [
            { no: 1, name: "current_items", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<getShoppingListResponse>): getShoppingListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.currentItems = [];
        if (value !== undefined)
            reflectionMergePartial<getShoppingListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: getShoppingListResponse): getShoppingListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string current_items */ 1:
                    message.currentItems.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: getShoppingListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string current_items = 1; */
        for (let i = 0; i < message.currentItems.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.currentItems[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message getShoppingListResponse
 */
export const getShoppingListResponse = new getShoppingListResponse$Type();
/**
 * @generated ServiceType for protobuf service ShoppingList
 */
export const ShoppingList = new ServiceType("ShoppingList", [
    { name: "createShoppingList", options: {}, I: CreateShoppingListRequest, O: CreateShoppingListResponse },
    { name: "updateShoppingList", options: {}, I: updateShoppingListRequest, O: updateShoppingListResponse },
    { name: "deleteShoppingList", options: {}, I: deleteShoppingListRequest, O: deleteShoppingListResponse },
    { name: "getShoppingList", options: {}, I: getShoppingListRequest, O: getShoppingListResponse }
]);
